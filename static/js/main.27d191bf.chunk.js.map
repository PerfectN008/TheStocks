{"version":3,"sources":["components/Stockdetail.js","components/Myportfolio.js","firebase/firebase.utils.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Stockdetail","props","className","stock","title","alt","src","img","MyPort","capital","id","style","display","investedStock","investamt","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","db","firestore","Table","stockclicked","e","forceUpdate","state","selectedStockId","target","selectedStock","stocks","document","getElementById","disabled","investamtchanged","value","setState","alert","investclicked","window","confirm","prevstate","setInterval","sellclicked","returns","collection","get","then","snapshot","forEach","doc","data","push","catch","error","console","log","this","map","key","onClick","type","onChange","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.27d191bf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Stockdetail = (props) => (\r\n    <div>\r\n        <h1 className='text-title text-center'>{props.stock.title}</h1>\r\n        <img className=\"img-fluid rounded\" alt='Graph' src={props.stock.img}/>\r\n    </div>\r\n)","import React from 'react';\r\n\r\nexport const MyPort = (props) => (\r\n    <div>\r\n        <h5 className=\"card-header\"> My Portfolio</h5>\r\n        <div className=\"card-body\">\r\n            <h5 className=\"card-title\">Capital: {props.capital}</h5>\r\n            <div id='investdetails' style={{display: 'none'}}>\r\n                <p className=\"card-text\">Invested in: {props.investedStock.title}</p>\r\n                <p className=\"card-text\">Invested Amount: {props.investamt}</p>\r\n            </div>\r\n\t\t</div>\r\n    </div>\r\n)","import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config={\r\n    apiKey: \"AIzaSyDZ3xTE5LdS5JnRlaqbv-h_7fpSR7ckjns\",\r\n    authDomain: \"stocks-db-cf94e.firebaseapp.com\",\r\n    databaseURL: \"https://stocks-db-cf94e.firebaseio.com\",\r\n    projectId: \"stocks-db-cf94e\",\r\n    storageBucket: \"stocks-db-cf94e.appspot.com\",\r\n    messagingSenderId: \"382635554204\",\r\n    appId: \"1:382635554204:web:839b2f9dd2572b6f4ac459\",\r\n    measurementId: \"G-T44MRMH5Y0\"\r\n  };\r\n\r\n  firebase.initializeApp(config);\r\n\r\n  export const auth=firebase.auth()\r\n  export const db=firebase.firestore()\r\n\r\n  export default firebase\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport { Stockdetail } from './Stockdetail';\r\nimport { MyPort } from './Myportfolio';\r\nimport{ db } from '../firebase/firebase.utils'\r\n\r\nexport default class Table extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            stocks:[],\r\n            selectedStockId: null,\r\n            capital: 10000,\r\n            selectedStock: {},\r\n            investamt: null,\r\n            investedStock: {}\r\n        }\r\n    }\r\n    componentDidMount(){\r\n    db.collection('stocks')\r\n        .get()\r\n        .then( snapshot => {\r\n            const stocks=[]\r\n            snapshot.forEach(doc => {\r\n                const data = doc.data()\r\n                stocks.push(data)\r\n            })\r\n            this.setState({stocks: stocks})\r\n        })\r\n        .catch( error => console.log(error))\r\n    }\r\n    stockclicked = (e) => {\r\n        this.forceUpdate()\r\n        this.state.selectedStockId=e.target.id\r\n        this.state.selectedStock=this.state.stocks[e.target.id-1]\r\n        document.getElementById('sellbtn').disabled=true\r\n        document.getElementById('selectedstockdetails').style={display: 'block'}\r\n    }\r\n    investamtchanged = (e) => {\r\n        if(e.target.value<=this.state.capital){\r\n            this.setState({investamt: e.target.value})\r\n        }else{\r\n            alert('Investment Cannot be greater than Capital')\r\n            e.target.value=this.state.investamt\r\n        }\r\n    }\r\n    investclicked = () => {\r\n        var confirmation=window.confirm(\"Do You Want To Invest Here?\")\r\n        if(confirmation===true){\r\n            if(this.state.investamt>0){\r\n                this.forceUpdate()\r\n                this.setState((prevstate) => {\r\n                    return{\r\n                        capital: prevstate.capital - prevstate.investamt,\r\n                        investedStock: prevstate.selectedStock\r\n                    }\r\n                } )\r\n                document.getElementById('investinput').value=''\r\n                document.getElementById('investinput').disabled=true\r\n                document.getElementById('investbtn').disabled=true\r\n                setInterval(function(){\r\n                    document.getElementById('sellbtn').disabled=false\r\n                }, 900000)\r\n                alert('You invested in '+ this.state.selectedStock.title)\r\n                document.getElementById('investdetails').style={display: 'block'}\r\n            }else{\r\n                alert('Enter Valid Investment Amount')\r\n            }\r\n        }else{\r\n            alert(\"Cancelled\")\r\n        }\r\n    }\r\n    sellclicked = () => {\r\n        var confirmation=window.confirm(\"Do You Want To Sell?\")\r\n        if(confirmation===true){\r\n            this.forceUpdate()\r\n            this.setState(() => {\r\n                return{\r\n                    capital: this.state.capital + (this.state.investamt * this.state.investedStock.returns)\r\n                }\r\n            })\r\n            document.getElementById('sellbtn').disabled=true \r\n        } else{\r\n            alert('Cancelled')\r\n        }  \r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='row'>\r\n                    <div className='col-md-2 mx-auto'>\r\n                        <table className='table table-dark'>\r\n                            <tr>\r\n                                <th>#</th>\r\n                                <th>Markets</th>\r\n                            </tr>\r\n                            <tbody>\r\n                                {this.state.stocks.map(stock => <tr key={stock.id}><td>{stock.id}</td><td className='stocktable' id={stock.id} onClick={this.stockclicked}>{stock.title}</td></tr>)}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div className='col-md-7' id='selectedstockdetails' style={{display: 'none'}}>\r\n                        <Stockdetail stock={this.state.selectedStock}/>\r\n                        <div  className=\"container mx-auto my-3\">\r\n                            <input type='number' className=\"form-control\" id='investinput' onChange={this.investamtchanged}/>\r\n                            <br></br>\r\n                            <button id='investbtn' className=\"btn btn-success btn-sm mx-2\" onClick={this.investclicked}>Invest</button>\r\n                            <button id='sellbtn' className='btn btn-warning btn-sm investdetails' onClick={this.sellclicked}>Sell</button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card col-md-2 mx-auto mb-3 bg-dark\" >\r\n                        <MyPort capital={this.state.capital} investedStock={this.state.investedStock} investamt={this.state.investamt} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\n\nimport Table from './components/Table'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nfunction App() {\n  return (\n    <div className=\"App mx-3 my-5\">\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}